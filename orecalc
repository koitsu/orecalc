#!/usr/local/bin/perl
use strict;
use warnings;
use JSON::PP;
use FindBin qw($Bin);

use vars qw($cfg %ores);
use vars qw($hold_size $m3 $chosen_ore $price $ore_found);
use vars qw(@section_order);


sub decode_json_file {
  my $filename = shift;

  # We need relaxed(1) because we use comments in our config files
  #
  my $json = JSON::PP->new->ascii;
  $json = $json->relaxed(1);

  local $/;
  open(FH, "<", $filename) or die("ERROR: Can't open config file $filename: $!\n");
  $json = $json->decode(<FH>);
  close(FH);
  return $json;
}

# Taken from http://docstore.mik.ua/orelly/perl3/lperl/ch15_03.htm
# but modified for ISK (no US dollar symbol)
#
sub big_money {
  my $number = sprintf "%.2f", shift @_;
  # Add one comma each time through the do-nothing loop
  1 while $number =~ s/^(-?\d+)(\d\d\d)/$1,$2/;
  $number;
}

sub verify_number {
  my $number = shift;

  if ($number !~ /^[0-9.]+$/) {
    print "ERROR: Value '", $number, "' is not a value number\n";
    exit(1);
  }

  return $number;
}


$hold_size = 5000.00;

$cfg = decode_json_file("$Bin/data.json");
%ores = %{ $cfg };

$m3 = "m\N{U+00B3}";

if ($ores{__ORDER}) {
  @section_order = @{ $ores{__ORDER} };

  delete $ores{__ORDER};
}
else {
  print "ERROR: __ORDER array missing in JSON file\n";
  exit(1);
}


# TODO Migrate to Getopt::Long, though this makes the command line
# TODO significantly longer / have to remember flags...
#
if ($#ARGV == 0) {
  $chosen_ore = $ARGV[0];
}
elsif ($#ARGV == 1) {
  $chosen_ore = $ARGV[0];
  $price      = verify_number($ARGV[1]);
}
elsif ($#ARGV == 2) {
  $chosen_ore = $ARGV[0];
  $price      = verify_number($ARGV[1]);
  $hold_size  = verify_number($ARGV[2]);
}


binmode(STDOUT, ":utf8");

foreach my $type (@section_order) {
  if (not $chosen_ore) {
    print "\e[1;37m", $type, "\e[0;0m\n";
  }

  my @array = @{ $ores{$type} };

  foreach (@array) {
    s#\s+# #g;
    my ($orename, $value) = split(/ /, $_);
    my $result = $hold_size / $value;

    if ($chosen_ore) {
      if ($chosen_ore eq $orename) {
        my $orename_coloured = "\e[1;36m" . $orename . "\e[0;0m";

        $ore_found = 1;

        printf "%s: %.2f $m3 = %.2f $m3 storable (in hold of %.2f $m3)\n",
          $orename_coloured,
          $value,
          $result,
          $hold_size;

        if ($price) {
          my $payout = $result * $price;

          my $price_coloured  = "\e[1;32m" . big_money($price)  . "\e[0;0m";
          my $payout_coloured = "\e[1;33m" . big_money($payout) . "\e[0;0m";

          printf "%s: %.2f $m3 \@ %s ISK = %s ISK payout (pre-tax)\n",
            $orename_coloured,
            $result,
            $price_coloured,
            $payout_coloured;
        }
      }
    }
    else {
      my $orename_coloured = "\e[1;36m" . $orename . "\e[0;0m";

      printf "  %-45s %.2f $m3 = %.2f $m3 storable (in hold of %.2f $m3)\n",
        $orename_coloured,
        $value,
        $result,
        $hold_size;
    }
  }
}

if ($chosen_ore and not $ore_found) {
  print "ERROR: Ore '", $chosen_ore, "' not found in JSON file\n";
  exit(1);
}

