#!/usr/local/bin/perl
use strict;
use warnings;

use vars qw($cfg %ores);
use vars qw($hold_size $m3 $chosen_ore $price $ore_found);
use vars qw(@section_order);

#
# EVE Ores
# https://ore.cerlestes.de/#site:ore
# http://timtrott.co.uk/eve-online-asteroid-ore-cheatsheet/
# https://www.fuzzwork.co.uk/ore/
# https://eve-marketdata.com/mining.php?step=Ore
#
%ores = (
  "__ORDER" => [
    "Security -0.8 to -0.6",
    "Security -0.5 (Amarr, Caldari)",
    "Security -0.5 (Amarr, Caldari, Gallente)",
    "Security -0.4 (Amarr, Minmatar)",
    "Security -0.2 (Caldari, Gallente)",
    "Security 0.2 (Amarr, Gallente)",
    "Security 0.4 (Amarr, Gallente)",
    "Security 0.7 (Amarr)\nSecurity 0.4 (Caldari, Minmatar)",
    "Security 0.7 (Gallente, Minmatar)",
    "Security 0.9 (Gallente, Minmatar)\nSecurity 0.7 (Caldari)",
    "Security 0.9 (Amarr, Caldari)",
    "All Space"
  ],
  "Security -0.8 to -0.6" => [
    "arkonor                          16.00",
    "crimson-arkonor                  16.00",
    "prime-arkonor                    16.00",
    "bistot                           16.00",
    "triclinic-bistot                 16.00",
    "monoclinic-bistot                16.00",
    "mercoxit                         40.00",
    "magma-mercoxit                   40.00",
    "vitreous-mercoxit                40.00"
  ],
  "Security -0.5 (Amarr, Caldari)" => [
    "spodumain                        16.00",
    "bright-spodumain                 16.00",
    "gleaming-spodumain               16.00"
  ],
  "Security -0.5 (Amarr, Caldari, Gallente)" => [
    "crokite                          16.00",
    "sharp-crokite                    16.00",
    "crystalline-crokite              16.00"
  ],
  "Security -0.4 (Amarr, Minmatar)" => [
    "gneiss                            5.00",
    "iridescent-gneiss                 5.00",
    "prismatic-gneiss                  5.00"
  ],
  "Security -0.2 (Caldari, Gallente)" => [
    "dark-ochre                        8.00",
    "onyx-ochre                        8.00",
    "obsidian-ochre                    8.00"
  ],
  "Security 0.2 (Amarr, Gallente)" => [
    "hedbergite                        3.00",
    "vitric-hedbergite                 3.00",
    "glazed-hedbergite                 3.00",
    "hemorphite                        3.00",
    "vivid-hemorphite                  3.00",
    "radiant-hemorphite                3.00"
  ],
  "Security 0.4 (Amarr, Gallente)" => [
    "jaspet                            2.00",
    "pure-jaspet                       2.00",
    "pristine-jaspet                   2.00"
  ],
  "Security 0.7 (Amarr)\nSecurity 0.4 (Caldari, Minmatar)" => [
    "kernite                           1.20",
    "luminous-kernite                  1.20",
    "fiery-kernite                     1.20"
  ],
  "Security 0.7 (Gallente, Minmatar)" => [
    "omber                             0.60",
    "silvery-omber                     0.60",
    "golden-omber                      0.60"
  ],
  "Security 0.9 (Gallente, Minmatar)\nSecurity 0.7 (Caldari)" => [
    "plagioclase                       0.35",
    "azure-plagioclase                 0.35",
    "rich-plagioclase                  0.35"
  ],
  "Security 0.9 (Amarr, Caldari)" => [
    "pyroxeres                         0.30",
    "solid-pyroxeres                   0.30",
    "viscous-pyroxeres                 0.30"
  ],
  "All Space" => [
    "scordite                          0.19",
    "condensed-scordite                0.19",
    "massive-scordite                  0.19",
    "veldspar                          0.15",
    "concentrated-veldspar             0.15",
    "dense-veldspar                    0.15"
  ]
);


# Taken from http://docstore.mik.ua/orelly/perl3/lperl/ch15_03.htm
# but modified for ISK (no US dollar symbol)
#
sub big_money {
  my $number = sprintf "%.2f", shift @_;
  # Add one comma each time through the do-nothing loop
  1 while $number =~ s/^(-?\d+)(\d\d\d)/$1,$2/;
  $number;
}

sub verify_number {
  my $number = shift;

  if ($number !~ /^[0-9.]+$/) {
    print "ERROR: Value '", $number, "' is not a value number\n";
    exit(1);
  }

  return $number;
}


$hold_size = 5000.00;

$m3 = "m\N{U+00B3}";

@section_order = @{ $ores{__ORDER} };
delete $ores{__ORDER};


# TODO Migrate to Getopt::Long, though this makes the command line
# TODO significantly longer / have to remember flags...
#
if ($#ARGV == 0) {
  $chosen_ore = $ARGV[0];
}
elsif ($#ARGV == 1) {
  $chosen_ore = $ARGV[0];
  $price      = verify_number($ARGV[1]);
}
elsif ($#ARGV == 2) {
  $chosen_ore = $ARGV[0];
  $price      = verify_number($ARGV[1]);
  $hold_size  = verify_number($ARGV[2]);
}


binmode(STDOUT, ":utf8");

foreach my $type (@section_order) {
  if (not $chosen_ore) {
    print "\e[1;37m", $type, "\e[0;0m\n";
  }

  my @array = @{ $ores{$type} };

  foreach (@array) {
    s#\s+# #g;
    my ($orename, $volume) = split(/ /, $_);
    my $result = $hold_size / $volume;

    if ($chosen_ore) {
      if ($chosen_ore eq $orename) {
        my $orename_coloured = "\e[1;36m" . $orename . "\e[0;0m";

        $ore_found = 1;

        printf "%s: %.2f $m3 hold / volume %.2f = %.2f units per hold\n",
          $orename_coloured,
          $hold_size,
          $volume,
          $result;

        if ($price) {
          my $payout = $result * $price;

          my $price_coloured  = "\e[1;32m" . big_money($price)  . "\e[0;0m";
          my $payout_coloured = "\e[1;33m" . big_money($payout) . "\e[0;0m";

          printf "%s: %.2f units \@ %s ISK = %s ISK\n",
            $orename_coloured,
            $result,
            $price_coloured,
            $payout_coloured;
        }
      }
    }
    else {
      my $orename_coloured = "\e[1;36m" . $orename . "\e[0;0m";

      printf "  %-45s volume %.2f = %.2f units per %.2f $m3 hold\n",
        $orename_coloured,
        $volume,
        $result,
        $hold_size;
    }
  }
}

if ($chosen_ore and not $ore_found) {
  print "ERROR: Ore '", $chosen_ore, "' not found\n";
  exit(1);
}

